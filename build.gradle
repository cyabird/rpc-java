buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:propdeps-plugin:0.0.8")
    }
}

plugins {
    id "com.gradle.build-scan" version "2.2.1"
    id "io.spring.dependency-management" version "1.0.4.RELEASE" apply false
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    publishAlways()
}

ext {
    moduleProjects = subprojects.findAll {
        !it.name.equals('rpc-documentation')
    }
}

// 所有项目配置
configure(allprojects) { project ->

    apply plugin: "propdeps"
    apply plugin: "java"

    group = "org.lucas"
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

// 模块项目
configure(moduleProjects) { subproject ->

    apply plugin: "io.spring.dependency-management"

    // 属性配置
    ext {
        junitVersion = "4.12"
        mockitoVersion = "2.12.0"
        hamcrestVersion = "1.3"
        springVersion = "5.0.1.RELEASE"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework:spring-framework-bom:${springVersion}"
        }
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
        applyMavenExclusions = false
    }

    [compileJava, compileTestJava].each() {
        it.options.encoding = 'UTF-8'
        it.sourceCompatibility = 1.8
        it.targetCompatibility = 1.8
    }

    compileTestJava {
        options.compilerArgs += "-parameters"
    }

    dependencies {
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }

        testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")

        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    }
}

configure(rootProject) {

    description = "RPC Project"

    configurations.archives.artifacts.clear()
}